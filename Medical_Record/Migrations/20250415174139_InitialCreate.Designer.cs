// <auto-generated />
using System;
using Medical_Record.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medical_Record.Migrations
{
    [DbContext(typeof(MedicalRecordContext))]
    [Migration("20250415174139_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Medical_Record.Models.AnamneseAdulto", b =>
                {
                    b.Property<int>("Id_Adulto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data_Anamnese")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data_Nascimento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Paciente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naturalidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Adulto");

                    b.HasIndex("Id_Paciente");

                    b.ToTable("AnamnesesAdulto");
                });

            modelBuilder.Entity("Medical_Record.Models.AnamneseInfantil", b =>
                {
                    b.Property<int>("Id_Infantil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data_Anamnese")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data_Nascimento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Feminino")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Paciente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Mae")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Pai")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Irmaos")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Masculino")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Naturalidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome_Mae")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome_Pai")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Profissao_Mae")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profissao_Pai")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Infantil");

                    b.HasIndex("Id_Paciente");

                    b.ToTable("AnamnesesInfantil");
                });

            modelBuilder.Entity("Medical_Record.Models.AtendimentoAdulto", b =>
                {
                    b.Property<int>("Id_Atendimento_Adulto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ambulatorio")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avaliacao_Demanda")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Encaminhado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Adulto")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Internamento")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Neuropsicologo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Neuropsquiatra")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Psicologo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Queixa_Motivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Atendimento_Adulto");

                    b.HasIndex("Id_Adulto")
                        .IsUnique();

                    b.ToTable("AtendimentosAdulto");
                });

            modelBuilder.Entity("Medical_Record.Models.AtendimentoInfantil", b =>
                {
                    b.Property<int>("Id_Atendimento_Infantil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ambulatorio")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Encaminhado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Internamento")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Neuropsicologo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Neuropsquiatra")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Psicologo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Queixa_Motivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Atendimento_Infantil");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("AtendimentosInfantil");
                });

            modelBuilder.Entity("Medical_Record.Models.Concepcao", b =>
                {
                    b.Property<int>("Id_Concepcao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Gestacoes_Anteriores")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Gravidez_Planejada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Concepcao_Mae")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Concepcao_Pai")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ordem_Nascimento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade_Gestacoes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Concepcao");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("Concepcoes");
                });

            modelBuilder.Entity("Medical_Record.Models.DadosEscolares", b =>
                {
                    b.Property<int>("Id_Escolar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adptacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Atendimento_Especializado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Atendimento_Motivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Frequenta_Escola")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Inicio")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Problemas_Escolares")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quais_Atendimentos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quando_Comecaram")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo_Problemas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Escolar");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("DadosEscolares");
                });

            modelBuilder.Entity("Medical_Record.Models.DesenvolvimentoMotor", b =>
                {
                    b.Property<int>("Id_Desenvolvimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Detalhes_Problema_Fala")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Andou")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Engatinhou")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Idade_Falou")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Problema_Fala")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Desenvolvimento");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("Desenvolvimentos");
                });

            modelBuilder.Entity("Medical_Record.Models.EvolucaoPaciente", b =>
                {
                    b.Property<int>("Id_Evolucao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Paciente")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Evolucao");

                    b.HasIndex("Id_Paciente");

                    b.ToTable("Evolucoes");
                });

            modelBuilder.Entity("Medical_Record.Models.ExamePsiquico", b =>
                {
                    b.Property<int>("Id_Exame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aparencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comportamento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Cooperativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Adulto")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Indiferente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Inteligencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Memoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Resistente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sensopercepcao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Exame");

                    b.HasIndex("Id_Adulto")
                        .IsUnique();

                    b.ToTable("ExamesPsiquicos");
                });

            modelBuilder.Entity("Medical_Record.Models.Humor", b =>
                {
                    b.Property<int>("Id_Humor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Baixo_Humor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Exaltado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Exame")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHumorous")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Quebra_Subta")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Humor");

                    b.HasIndex("Id_Exame")
                        .IsUnique();

                    b.ToTable("Humores");
                });

            modelBuilder.Entity("Medical_Record.Models.Linguagem", b =>
                {
                    b.Property<int>("Id_Linguagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Afasias")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disartria")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Exame")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Logorreia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Mussitacao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Neologismo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Para_Respostas")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Parafasia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Suicida")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Linguagem");

                    b.HasIndex("Id_Exame")
                        .IsUnique();

                    b.ToTable("Linguagens");
                });

            modelBuilder.Entity("Medical_Record.Models.Paciente", b =>
                {
                    b.Property<int>("Id_Paciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Idade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Paciente");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Medical_Record.Models.Pensamento", b =>
                {
                    b.Property<int>("Id_Pensamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Acelerado")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Bloqueio")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fuga")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Exame")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Prolixo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Repeticao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Retardado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Pensamento");

                    b.HasIndex("Id_Exame")
                        .IsUnique();

                    b.ToTable("Pensamentos");
                });

            modelBuilder.Entity("Medical_Record.Models.SaudeFisica", b =>
                {
                    b.Property<int>("Id_Saude")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Antecedentes_Familiares")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cirugias_Internacoes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Doencas_Infantis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Enxergam_Problema")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Espectativas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivo_Queixa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quais_Medicamentos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quando_Como_Iniciou")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tratamentos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Uso_Medicamento")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_Saude");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("SaudeFisicas");
                });

            modelBuilder.Entity("Medical_Record.Models.Social", b =>
                {
                    b.Property<int>("Id_Social")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Atitude_Estranhos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Infantil")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Interacao_Irmaos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interacao_Outros")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Interacao_Pais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_Social");

                    b.HasIndex("Id_Infantil")
                        .IsUnique();

                    b.ToTable("Sociais");
                });

            modelBuilder.Entity("Medical_Record.Models.AnamneseAdulto", b =>
                {
                    b.HasOne("Medical_Record.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("Id_Paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Medical_Record.Models.AnamneseInfantil", b =>
                {
                    b.HasOne("Medical_Record.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("Id_Paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Medical_Record.Models.AtendimentoAdulto", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseAdulto", "Anamnese")
                        .WithOne("Atendimento")
                        .HasForeignKey("Medical_Record.Models.AtendimentoAdulto", "Id_Adulto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.AtendimentoInfantil", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("Atendimento")
                        .HasForeignKey("Medical_Record.Models.AtendimentoInfantil", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.Concepcao", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("Concepcao")
                        .HasForeignKey("Medical_Record.Models.Concepcao", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.DadosEscolares", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("DadosEscolares")
                        .HasForeignKey("Medical_Record.Models.DadosEscolares", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.DesenvolvimentoMotor", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("Desenvolvimento")
                        .HasForeignKey("Medical_Record.Models.DesenvolvimentoMotor", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.EvolucaoPaciente", b =>
                {
                    b.HasOne("Medical_Record.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("Id_Paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Medical_Record.Models.ExamePsiquico", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseAdulto", "Anamnese")
                        .WithOne("Exame")
                        .HasForeignKey("Medical_Record.Models.ExamePsiquico", "Id_Adulto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.Humor", b =>
                {
                    b.HasOne("Medical_Record.Models.ExamePsiquico", "Exame")
                        .WithOne("Humor")
                        .HasForeignKey("Medical_Record.Models.Humor", "Id_Exame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");
                });

            modelBuilder.Entity("Medical_Record.Models.Linguagem", b =>
                {
                    b.HasOne("Medical_Record.Models.ExamePsiquico", "Exame")
                        .WithOne("Linguagem")
                        .HasForeignKey("Medical_Record.Models.Linguagem", "Id_Exame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");
                });

            modelBuilder.Entity("Medical_Record.Models.Pensamento", b =>
                {
                    b.HasOne("Medical_Record.Models.ExamePsiquico", "Exame")
                        .WithOne("Pensamento")
                        .HasForeignKey("Medical_Record.Models.Pensamento", "Id_Exame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");
                });

            modelBuilder.Entity("Medical_Record.Models.SaudeFisica", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("SaudeFisica")
                        .HasForeignKey("Medical_Record.Models.SaudeFisica", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.Social", b =>
                {
                    b.HasOne("Medical_Record.Models.AnamneseInfantil", "Anamnese")
                        .WithOne("Social")
                        .HasForeignKey("Medical_Record.Models.Social", "Id_Infantil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");
                });

            modelBuilder.Entity("Medical_Record.Models.AnamneseAdulto", b =>
                {
                    b.Navigation("Atendimento")
                        .IsRequired();

                    b.Navigation("Exame")
                        .IsRequired();
                });

            modelBuilder.Entity("Medical_Record.Models.AnamneseInfantil", b =>
                {
                    b.Navigation("Atendimento")
                        .IsRequired();

                    b.Navigation("Concepcao")
                        .IsRequired();

                    b.Navigation("DadosEscolares")
                        .IsRequired();

                    b.Navigation("Desenvolvimento")
                        .IsRequired();

                    b.Navigation("SaudeFisica")
                        .IsRequired();

                    b.Navigation("Social")
                        .IsRequired();
                });

            modelBuilder.Entity("Medical_Record.Models.ExamePsiquico", b =>
                {
                    b.Navigation("Humor")
                        .IsRequired();

                    b.Navigation("Linguagem")
                        .IsRequired();

                    b.Navigation("Pensamento")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
